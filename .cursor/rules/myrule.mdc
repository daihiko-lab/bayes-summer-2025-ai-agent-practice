---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

## 参照ファイル

- `.cursor/context/progress.md`
- `.cursor/context/technologystack.md`
- `.cursor/context/directorystructure.md`

## 標準ワークフロー

### 1. 指示の分析と計画
<タスク分析>
- 主要なタスクを簡潔に要約してください。
- 記載された技術スタックを確認し、その制約内での実装方法を検討してください。  
  **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。

### 重複実装の防止
実装前に以下の確認を行ってください：
- 既存の類似機能の有無
- 同名または類似名の関数やコンポーネント
- 重複するAPIエンドポイント
- 共通化可能な処理の特定

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
</タスク分析>

### 2. タスクの実行
- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実装時は以下の点に注意してください：
  - 適切なディレクトリ構造の遵守
  - 命名規則の一貫性維持
  - 共通処理の適切な配置

### 3. 品質管理と問題対応
- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合が発生した場合は、以下のプロセスで対応してください：
  a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
  b. 対策案の作成と実施
  c. 修正後の動作検証
  d. デバッグログの確認と分析

- 検証結果は以下の形式で記録してください：
  a. 検証項目と期待される結果
  b. 実際の結果と差異
  c. 必要な対応策（該当する場合）

### 4. 最終確認
- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
- 実装した機能に重複がないことを最終確認してください。

### 5. 結果報告
以下のフォーマットで最終的な結果を報告してください：
```markdown
# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[成果物の詳細や、該当する場合はリンクなど]

## 課題対応（該当する場合）
- 発生した問題と対応内容
- 今後の注意点

## 注意点・改善提案
- [気づいた点や改善提案があれば記述]
```

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- 変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

## 基本運用ルール

### ファイル・ディレクトリ操作
- ディレクトリ構造の更新: ファイルの追加・削除・移動時は `tree -L 4 | cat` を実行し、それに応じて `directorystructure.md` を更新してください。
- ファイル操作前のパス検証: 親ディレクトリが存在することを確認し、不確実な場合はリストで検証してください。
- ファイルパス規約: ファイルツールでは、ワークスペースルート相対パスを使用してください (`.cursor/` や `./` や `../` は避ける)。

### コマンド実行
- `pwd` で作業ディレクトリを確認してください。
- 対象パスが存在することを確認してください（リストや `tree` で）。
- ワークスペースルート相対パスを優先してください。
- エスケープ処理: 正規表現、Markdown、スペースを含むファイルパス、シェル特殊文字を適切に処理してください。

### その他
- ナレッジベース更新: プロジェクト固有の決定事項を確認なしで `project_specific_knowledge.md` に追記し、後で通知してください。
- 日付取得: 必要時は `.cursor/scripts/get_current_date.sh` で現在日付を取得してください。
- テスト実行: ユーザーからの明示的な要求がない限り、ターミナルでのテスト実行は禁止です。
- ツール・パッケージ固有エラー: コードロジック外部の原因の場合は、公式ドキュメント・README・Issues のリンクをユーザーに要求してください。

## コーディング・出力規則

### 段階的編集戦略
- 大きな変更は小さく独立した編集に分割してください。
- 各編集後、ファイル内容を確認し、意図通りに適用されなかった場合はアプローチを調整してください。
- 非常に大きなファイルの場合は、一括置換よりも複数の対象を絞った編集を優先してください。

### コンソール出力とUX
- 絵文字や装飾記号は使用せず、プレーンテキストまたはシンプルなUnicodeのみを使用してください。
- `=== セクション名 ===` のような明確なセクションマーカーを使用してください。
- シンプルな進捗フォーマット (パーセントまたは `[n/total]`) を優先してください。
- stdout/stderr の使用を一貫させ、即座の可視性が必要な場合はフラッシュし、進捗出力後に改行を追加してください。

### 色とアクセシビリティのルール
- 色のみで情報を伝えることに依存しないでください (WCAG 1.4.1)。常に色と形状・テキスト・ラベルを組み合わせてください。
- 意味の区別にグレー・明度のみの差分は避けてください。バーを使用する場合は、状態をグリフで表現してください (例：塗りつぶし `█`、空 `·`)。
- 色がオプションの装飾である場合は、アクセント色を青・シアン系に限定してください。ラベル・値は色なしでも読み取れるようにしてください。
- 非TTY環境 (ログ・CI) で意味が保持されるようにしてください：動的効果を無効化するか、情報損失なしでプレーンテキストにフォールバックしてください。
- 構造には高コントラストで色に依存しない記号 (例：ボックス・線) を優先してください。

### プロット・可視化のルール

- デフォルトプロットタイプ: 時系列・軌道には線グラフを優先し、ヒートマップは必須でない限り避けてください。ヒートマップが必要な場合は、等高線や直接ラベルと組み合わせ、知覚的に均一でCVD安全なカラーマップを使用してください。
- 色の使用:
  - 色覚異常対応パレットを使用: 定性的カテゴリにはOkabe-Ito、連続データには `viridis` または `cividis` を使用してください。
  - 赤・緑のコントラストに依存せず、色相のみで意味を符号化することは避けてください。
  - 色の数は控えめに (≤ 6-8カテゴリ)。それ以上の場合は小さな多重グラフに分割してください。
- 冗長なエンコーディング (必須):色と線種・マーカー形状を組み合わせてください。
  - 線種: 実線、破線、点線、一点鎖線 (最低4種類)。
  - マーカー: 円、四角、三角、ダイヤ、十字。印刷での読みやすさのため最小サイズを確保してください。
  - 塗りつぶし領域・バーでは、グレースケール印刷時にハッチングやパターンを使用してください (色の塗りつぶしのみでなく)。
- タイポグラフィとレイアウト:
  - 軸ラベル ≥ 11pt、目盛りラベル ≥ 10pt、タイトル ≥ 13pt (論文用)/ スライド用に適切にスケールしてください。
  - 可能な限り曲線近くに直接ラベリングを使用し、それ以外ではプロット領域外に凡例を配置し重複を避けてください。
  - 白または非常に明るい背景を維持し、主要グリッド線は控えめに、視覚的混乱は避けてください。
- データ整合性の補助:
  - エラーバーまたは陰影付き信頼区間で不確実性を表示してください (グレースケール印刷時は明確なパターンで)。
  - 明確な目盛りフォーマットを使用してください (例：千の位区切り文字、有用な場合は固定小数点)。

### 例（良い例）

```julia
println("=== Simulation Starting ===")
println("Configuration:")
println("  Initializations: $(num_init)")
println("  Plays per init: $(num_plays)")
println("  Random seed: $(random_seed)")
println("="^50)
```